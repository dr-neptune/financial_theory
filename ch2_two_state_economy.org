#+TITLE: Chapter 2: Two-State Economy

The analysis of this chapter is based on the most simple model economy that is still rich enough to introduce many important notions and concepts of finance: an economy with two relevant points in time and two uncertain future states only. It also allows us to present some important results in the field, like the Fundamental Theorems of Asset Pricing.

| Finance                               | Mathematics                                  | Python                           |
|---------------------------------------+----------------------------------------------+----------------------------------|
| Time                                  | Natural Numbers N                            | int, type                        |
| Money (Currency)                      | Real Numbers R                               | float                            |
| Cash Flow                             | Tuple                                        | tuple, list                      |
| Return, Interest                      | Real Numbers R                               | abs                              |
| Net Present Value                     | Function                                     | def, return                      |
| Uncertainty                           | Vector Space R^2                             | np, ndarray, np.array            |
| Financial Asset                       | Process                                      | ndarray, tuple                   |
| Risk                                  | Probability, State Space, Power Set, Mapping | ndarray                          |
| Expectation, Expected Return          | dot product                                  | np.dot                           |
| Volatility                            | Variance, Standard Deviation                 | np.sqrt                          |
| Contingent Claims                     | Random Variable                              | np.arange, np.maximum, plt.plot  |
| Replication, Arbitrage                | Linear Equations, Matrix Form                | ndarray, np.linalg.solve, np.dot |
| Completeness, Arrow-Debreu Securities | Linear Independence, Span                    | np.linalg.solve                  |
| Martingale Pricing                    | Martingale, Martingale Measure               | np.dot                           |
| Mean-Variance                         | Expectation, Variance, Standard Deviation    | np.linspace, .std(), list comp   |

* Economy

An economy is an abstract notion that subsumes other elements of the financial model, like assets (real, financial), agents (people, institutions), or money.

* Real Assets

Multiple real assets are available in the economy that can be used for different purposes. It might be a machine or a cup

* Agents

Agents can be thought of as individual human beings being active in the economy. They accept money during transactions and spend it during others.

* Time

Economic activity takes place at discrete points in time only.

* Money

In the economy, money is available in unlimited supply. Money is also infinitely divisible. Money should be thought of in abstract terms only and not in terms of cash (physical coins or bills).

Money in general serves as the *numeraiare* in the economy, in that the value of one unit of money (like USD, EUR, GBP, etc) is normalized to exactly 1.

* Cash Flow

Combining time with currency leads to the notion of cash flow. An investment is generally considered to be a *cash outflow*, and one often represents this as a negative real number. The payback is a *cash inflow* and therewith a positive real number.

To indicate points in time when cash flows happen, a time index is used: $c_{t=0} = -9.5$, $c_{t=1}=11.75$

A pair of cash flows now and one year from now is modeled mathematically as an ordered pair or two-tuple which combines the two relevant cash flows into one object:

$c = (c_0, c_1)$

* Return

Consider an investment project with cash flows $c = (c_0, c_1) = (-10, 12)$.
The return $R \in \mathcal{R}$ of the project is the sum of the cash flows $c_0 + c_1 = -10 + 12 = 2$.
The rate of return $r \in \mathcal{R}$ is the return divided by the absolute value of the investment outlay $r = \frac{R}{|c_0|} = \frac{-10 + 12}{10} = 0.2$

#+begin_src python
c = (-10, 12)
R = sum(c)
R
r = R / abs(c[0])
r
#+end_src

* Interest

There is a difference between a cash flow today and a cash flow in one year. It results from interest that is being earned on currency units or that has to be paid to borrow currency units. Interest in this context is the price being paid for having control over money that belongs to another agent.

An agent that has currency units that they do not need today can deposit these with a bank or lend them to another agent to earn interest. If the agent needs more currency units than they currently have available, they can borrow them from a bank or other agents, but they will need to pay interest.

* Present Value

Having lending or depositing options available leads to opportunity costs for deployign money in an investment project.
To appropriately compare cash flows in one year with those of today, the present value needs to be calculated. This is accomplished by discounting using the fixed interest rate in the economy.

Discounting can be modeled as a function $D:\mathcal{R} \to \mathcal{R}$ which maps a real number (cash flow in one year) to another real number (cash flow today).

$c_0 = D(c_1) = \frac{c_1}{1 + i}$

#+begin_src python
from typing import Union

def discounted_cash_flow(cash_flow: Union[tuple, float], interest_rate: float) -> float:
    float_num = type(cash_flow) == float
    last_cash_flow = cash_flow if float_num else cash_flow[-1]
    num_years = 1 if float_num else len(cash_flow) - 1
    return last_cash_flow / ((1 + interest_rate) ** num_years)

discounted_cash_flow(12.1, 0.1)
discounted_cash_flow(11.0, 0.1)
discounted_cash_flow((1, 2, 3, 4, 5), 0.1)
#+end_src

* Net Present Value

How shall an agent decide whether to conduct an investment project or not? One criterion is the net present value.
The net present value, NPV $\in \mathbb{R}$, is the sum of the cash outflow today and the present value of the cash inflow in one year $NPV: \mathbb{R}^2 \to \mathbb{R}$:

$NPV(c) = c_0 + D(c_1)$

If the net present value is positive, the project should be conducted. If negative, then not, since the alternative of just depositing the money with a bank is more attractive.

#+begin_src python
from typing import Tuple

cA = (-10.5, 12.1)
cB = (-10.5, 11.0)

def NPV(c: Tuple[float, float], interest_rate: float) -> float:
    return c[0] + discounted_cash_flow(c[-1], interest_rate)

NPV(cA, 0.1)
NPV(cB, 0.1)
#+end_src

* Uncertainty

Cash inflows from an investment project one year from now are in general uncertain. In the model economy, the concept of states of the economy in one year subsumes the influence of all relevant factors. Assume that in one year the economy might be in one of two different states $u$ and $d$, which might be interpreted as up and down. The cash flow of a project in one year then becomes a vector

$c_1 \in \mathbb{R}^2$ where $c_1 = (c_1^u, c_1^d)$

representing the relevant cash flows per state of the economy. Formally this is represented as a column vector

$c_1 = {c_1^u \choose c_1^d}$

#+begin_src python
import numpy as np

c0 = -10
c1 = np.array((20, 5))
c = (c0, c1)
#+end_src

* Financial Assets

Financial assets are financial instruments ("contracts") that have a fixed price today and an uncertain price in one year.
Such a share might be available at a price today of $S_0 \in \mathbb{R}_{>0}$. The price of the share in one year depends on the success of the investment project, i.e., whether a high cash inflow is observed in the u state or a low one in the d state. Formally, $S_1^u, S_1^d \in \mathbb{R}_{\geq 0}$ where $S_1^u > S_1^d$.

One speaks also of the price process of the financial asset $S:\mathbb{N}_0 \cross \{u, d\} \to \mathbb{R}_{\geq 0}$ mapping time and state of the economy to the price of the financial asset.

* Probability Measure

The probabilities for events that are physically possible together form a probability measure. Such a probability measure is a function $P:\mathcal{P}(\{u, d\}) \to \mathbb{R}_{\geq 0}$ mapping all elements of the power set of $\{u, d\}$ with $\mathcal{P}(\{u, d\})$ to the unit interval.
In this context, the set $\{u, d\}$ is called the state space and is symbolized by $\Omega$. The triple $(\Omega, \mathcal{P}(\Omega), P)$ is called a probability space.

A function P representing a probability measure needs to satisfy 3 conditions:

1. $P(\emptyset) = 0$
2. $0 \leq P(\omega), \omega \in \Omega \leq 1$
3. $P(\Omega) = P(u) + P(d) = 1$

Having a fully specified probability measure available, the model economy is typically called an economy under risk.
A model economy without a fully specified probability measure is often called an economy under ambiguity

Uncertainty in a financial context can take on different forms. Risk in general refers to a situation in which a full probability distribution over future states of the economy is assumed to be known. Ambiguity refers to situations in which such a distribution is not known.

#+begin_src python
p = 0.4
P = np.array((p, 1-p))
P
#+end_src

* Expectation

The expectation can be interpreted as the weighted average, where the weights are given by the probabilities.
The expectation of the uncertain price $S_1$ in one year under probability measure $P$ is

$\mathbb{E}^p(S_1) = \Sigma_{\omega \in \Omega} P(\omega) \cdot S_1^{\omega} = p \cdot S_1^u + (1 - p) \cdot S_1^d$

#+begin_src python
S0 = 10
S1 = np.array((20, 5))
np.dot(P, S1)
#+end_src

* Expected Return

Under uncertainty, the notions of return and rate of return need to be adjusted. In such a case, the expected return of a financial asset is given as the expectation of the price in one year minus the price today. This can be seen by taking the expectation of the uncertain return $R = (R^u, R^d)^T$ and rearranging as follows:

$\mathbb{E}^p(R) = ({p \choose 1 - p}, {R^u \choose R^d}) = ({p \choose 1 - p}, {S_1^u - S_0 \choose S_1^d - S_0}) = p \cdot (S_1^u - S_0) + (1 - p) \cdot (S_1^d - S_0) = \mathbb{E}^p(S_1) - S_0$

The expected rate of return is the expected return divided by the price today

$\mathbb{E}^P(r) = \frac{\mathbb{E}^P(R)}{S_0}$

#+begin_src python
def expected_return(initial_price: float, probabilities: np.array, upside_downside: np.array) -> float:
    return np.dot(probabilities, upside_downside) - initial_price


def expected_rate_of_return(initial_price: float, expected_return: float) -> float:
    return expected_return / initial_price


S0 = 10
p = 0.4
P = np.array((p, 1 - p))
S1 = np.array((20, 5))
er = expected_return(S0, P, S1)
err = expected_rate_of_return(S0, er)
er
err
#+end_src

* Volatility

In finance, risk and expected return are the dominating pair of concepts. Risk can be measured in many ways, while the volatility as measured by the standard deviation of the rates of return is probability the most common measure.

In this context, the variance of the return rates of a financial aspect is defined by

$\sigma^2(r) = \mathbb{E}^p((r - \mu)^2) = ({p \choose 1 - p}, {(r^u - \mu)^2 \choose (r^d - \mu)^2})$

where $\mu$ is the expected rate of return, and $r^\omega \equiv (S_1^\omega - S_0) / S_0, \omega \in \Omega$.

The volatility is defined as the standard deviation of the return rates, which is the square root of the variance

$\sigma(r) = \sqrt{\sigma^2(r)}$

#+begin_src python
def rate_of_return(x0: np.array, x1: np.array) -> float:
    return (x1 - x0) / x0

rate_of_return(S0, S1)

mu = np.dot(P, rate_of_return(S0, S1))
mu

def sigma_squared(probability_measure: np.array, rate_of_return: float, expected_rate_of_return: float) -> float:
    return np.dot(probability_measure, (rate_of_return - expected_rate_of_return) ** 2)

ss = sigma_squared(P, rate_of_return(S0, S1), mu)
ss

sigma = np.sqrt(ss)
sigma
#+end_src

* Contingent Claims

A *contingent claim* is a financial asset - formalized by some contract - that offers a state-contingent payoff one year from now.
Such a contingent claim can have an arbitrary state-contingent payoff or one that is derived from the payoff of other financial assets.

In the latter case, one generally speaks of *derivative assets* or *derivative instruments*

Formally, a contingent claim is a function $C_1: \Omega \to \mathbb{R}_{\geq 0}, \omega \to C_1(\omega)$, mapping events to non-negative real numbers.

Suppose we have a risky stock with the price process

$S = (S_0, (S_1^u, S_1^d)^T)$

A *call option* on the stock has a payoff in one year of $C_1(S_1(\omega)) = \max(S_1(\omega) - K, 0)$ and $\omega \in \Omega$. $K \in \mathbb{R}^+$ is called the strike price option.

#+begin_src python
# visualize the payoff of a call option on a segment of the real line
S1 = np.random.normal(10, 2.5, 20)
K = 10

C1 = np.maximum(S1 - K, 0)

from pylab import mpl, plt
import matplotlib
matplotlib.use('tkAgg')
plt.style.use('seaborn')
mpl.rcParams['savefig.dpi'] = 300
mpl.rcParams['font.family'] = 'serif'

plt.figure(figsize=(10, 6))
plt.plot(np.arange(20), C1, lw=3.0, label='$C_1 = \max(S_1 - K, 0)$')
plt.legend(loc=0)
plt.xlabel('$S_1$')
plt.ylabel('$C_1$')
plt.show()
#+end_src

* Replication

When introducing a contingent claim into the economy, an important question that arises is whether the payoff of the contingent claim is redundant or not.

The payoff of the call option is said to be linearly dependent - or redundant - when a solution to the following problem exists:

$b \cdot {B_1 \choose B_1} + s \cdot {S_1^u \choose S_1^d} = {C_1^u \choose C_1^d}$

Essentially, if we have a linearly dependent system like above, we can buy/sell some amount of the bond / stock to replicate the payoff of the call option.

Technically, *short selling* implies borrowing the respective number of units of the financial asset today from another agent and immediately selling the units in the market. In one year, the borrowing agent buys the exact number of units of the financial asset back in the market at the then-current price and transfers them back to the other agent.

$\mathcal{M} =  \begin{pmatrix} B_1 & S_1^u\\ B_1 & S_1^d \end{pmatrix}$

The future payoff vectors of the bond and the stock represent the values in the first and second column of the matrix, respectively.

With these conventions, the replication problem can be represented in matrix form as

$\mathcal{M} \cdot \phi = C_1$

where $\phi \in \mathbb{R}^2$ is the vector containing the bond and stock portfolio positions for replication $\phi \equiv (b, s)^T \cdot \phi$ is usually simply called *portfolio* or *trading strategy*.

$\begin{pmatrix} B_1 & S_1^u\\ B_1 & S_1^d \end{pmatrix} \cdot \begin{pmatrix} b\\ s \end{pmatrix} = \begin{pmatrix} C_1^u\\ C_1^d \end{pmatrix}$

#+begin_src python
B = (10, np.array((11, 11)))  # price process for the riskless bond
S = (10, np.array((20, 5)))   # price process for the risky stock
M = np.array((B[1], S[1])).T  # matrix with future payoff vectors
K = 15                        # the strike price for the call option
C1 = np.maximum(S[1] - K, 0)  # values for the payoff vector in one year
phi = np.linalg.solve(M, C1)  # find the numerical values of the payoff vector, b and s
# solves the replication problem in matrix form to obtain the optimal portfolio positions
phi
#+end_src

* Arbitrage Pricing

How much does it cost to replicate the payoff of the call option?

Define the value of the replication portfolio today by $V_0(\phi)$. It is given by the dot product:

$V_0(\phi) = (\begin{pmatrix} b \\ s \end{pmatrix}, \begin{pmatrix} B_0 \\ S_0 \end{pmatrix}) = b \cdot B_0 + s \cdot S_0$

The uncertain value of the replication portfolio in one year $V_1(\phi)$ can be represented via matrix multiplication as

$V_1(\phi) = \begin{pmatrix} B_1 & S_1^u \\ B_1 & S_1^d \end{pmatrix} \cdot \begin{pmatrix} b \\ s \end{pmatrix} = \begin{pmatrix} 5 \\ 0 \end{pmatrix}$


Together, one has the /value process/ of the portfolio as $V(\phi) = (V_0(\phi), V_1(\phi))$ if there is no ambiguity regarding the portfolio.

Having a portfolio available that perfectly replicates the future payoff of a contingent claim raises the next question:

What if the price of the contingent claim today differs from the costs of setting up the replication portfolio?
Then there exists an /arbitrage/ or /arbitrage opportunity/ in the economy.

An *arbitrage* is a trading strategy $\phi$ that creates a risk-less profit out of an investment of 0. Formally,

$\phi$ is an arbitrage if

$V_0(\phi) = 0$ and $E^P(V_1(\phi)) > 0$

or

$V_0(\phi) > 0$ and $V_1(\phi) = 0$

A model for an economy that allows for arbitrage opportunities can be considered not viable.
Therefore, the only price that is consistent with the absence of arbitrage is $C_0 = 1.818181$.
One calls this price the /arbitrage price/ of the call option.

Formally, the arbitrage price is the dot product of the replication portfolio and the price vector of the replicating financial assets:

$C_0 \equiv V_0(\phi) = (\phi^*, \begin{pmatrix} B_0 \\ S_0 \end{pmatrix}) = b^* \cdot B_0 + s^* \cdot S_0$

giving rise to an arbitrage-free price process for the contingent claim of $C = (C_0, C_1)$

#+begin_src python
C0 = np.dot(phi, (B[0], S[0]))
C0
#+end_src

* Market Completeness

The set of attainable contingent claims $\mathbb{A}$ comprises all those contingent claims that are replicable by trading in financial assets. It is given by the span, which is the set of all linear combinations of the future price vectors of the traded financial assets.

$\mathbb{A} = \{\mathcal{M} \cdot \phi, \phi \in \mathbb{R}_{\geq 0}^2\}$

if short selling is prohibited, and

$\mathbb{A} = \{\mathcal{M} \cdot \phi, \phi \in \mathbb{R}^2\}$

if it is allowed in unlimited fashion.

Since /every/ contingent claim can be replicated by a portfolio consisting of a position in the risk-less bond and the risky stock, one speaks of a /complete market model/.
Therefore, every contingent claim can be priced by replication and arbitrage.

Formally, the only requirement is that the price vectors of the two financial assets in one year be linearly independent

The payoff vectors of the two traded financial assets span $\mathbb{R}^2$ since they form a /basis/ of the vector space.

#+begin_src python
from numpy.random import default_rng

# fix the rng seed
rng = default_rng(100)

# number of values to be simulated
n = 1000

# simulate the bond position for values between 0 and 1 by sampling a uniform RV
b = rng.random(n)

# derives the stock position as the difference between 1 and the bond position
s = (1 - b)

def portfolio(b, s):
    A = [b[i] * B[1] + s[i] * S[1] for i in range(n)]
    return np.array(A)

# initiate calculation
A = portfolio(b, s)

# plot
plt.figure()
plt.plot(A[:, 0], A[:, 1], 'r.')
plt.show()
#+end_src

We get a straight line, since the random portfolio positions sum to 1

#+begin_src python
s = rng.random(n)
A = portfolio(b, s)

# plot
plt.figure()
plt.plot(A[:, 0], A[:, 1], 'r.')
plt.show()
#+end_src

The random portfolio span a 2D area (rhombus)

If we allow for positive as well as negative portfolio positions for both the bond and the stock, we get an elliptic area around the origin:

#+begin_src python
b, s = rng.standard_normal(n), rng.standard_normal(n)
A = portfolio(b, s)

# plot
plt.figure()
plt.plot(A[:, 0], A[:, 1], 'r.')
plt.show()
#+end_src

* Arrow-Debrau Securities

An /Arrow-Debreu security/ is defined by the fact that it pays exactly one unit of currency in a specified future state.
Since the market is complete, Arrow-Debreu securities can be replicated by portfolios with bond and stock. Therefore, both replication problems have (unique) solutions, and both securities have unique arbitrage prices.

The two replication problems are:

$\mathcal{M} \cdot \phi = \begin{pmatrix} 1 \\ 0 \end{pmatrix}$

$\mathcal{M} \cdot \phi = \begin{pmatrix} 0 \\ 1 \end{pmatrix}$

These two payoff vectors for a /standard basis/, or /natural basis/ for the $\mathbb{R}^2$ vector space.

Financially, replacing the original future price vectors of the bond and the stock with AD securities as a basis for the model economy significantly simplifies the replication problem for all other contingent claims.

Consider the two AD securities with price processes:

$\gamma^u = (\gamma_0^u, (1, 0)^T)$

$\gamma^d = (\gamma_0^d, (1, 0)^T)$

and define:

$M^\gamma = \begin{pmatrix} 1 & 0 \\ 0 & 1 \end{pmatrix}$


Consider a general contingent claim with future payoff vector:

$C_1 = \begin{pmatrix} C_1^u \\ C_1^d \end{pmatrix}$

The replication portfolio $\phi^\gamma$ for the contingent claim then is trivially given by $\phi^\gamma = (C_1^u, C_1^d)^T$

The arbitrage price for the contingent claim is:

$C_0 = V_0(\phi^\gamma) = C_1^u \cdot \gamma_0^u + C_1^d \cdot \gamma_0^d$

* Martingale Pricing

A /martingale measure/ $Q: \mathcal{P}(\Omega) \to \mathbb{R}_{\geq 0}$ is a special kind of probability measure. It makes the discounted price process of a financial asset a /martingale/.
For the stock to be a martingale under Q, the following relationship must hold:

$S_0 = \frac{1}{1 + i} \cdot \mathbb{E}^Q(S_1)$

One also speaks of the fact that the price processes drift (on average) with the risk-less interest rate under the martingale measure:

$B_0 \cdot (1 + i) = B_1$

$S_0 \cdot (1 + i) = E^Q (S_1)$

Denote $q \equiv Q(u)$. One gets

$q \cdot S_1^u + (1 - q) \cdot S_1^d = S_0 \cdot (1 + i)$

$q = \frac{S_0 \cdot (1 + i) - S_1^d}{S_1^u - S_1^d}$

Given previous assumptions, for q to define a valid probability measure, $S_1^u > S_0 \cdot (1 + i) > S_1^d$ must hold. If so, one gets a new probability space ($\Omega, \mathcal{P}(\Omega), Q$) where Q replaces P

If these relationships for $S_1$ do not hold, then a simple arbitrage is either to buy the risky asset in the case $S_0 \cdot (1 + i) \leq S_1^d$ or simply sell it in the other case $S_0 \cdot (1 + i) \geq S_1^u$

If equality holds in these relationships, one also speaks of a /weak arbitrage/ since the riskless profit can only be expected on average and not with certainty.

Assuming the numerical price processes from before, the calculation of q in Python is just an arithmetic operation on floating point numbers:

#+begin_src python
i = (B[1][0] - B[0]) / B[0]
i

q = (S[0] * (1 + i) - S[1][1]) / (S[1][0] - S[1][1])
q
#+end_src

* First Fundamental Theorem of Asset Pricing

** First Fundamental Theorem of Asset Pricing

The following statements are equivalent:

1. A martingale measure exists
2. The economy is arbitrage-free

* Pricing by Expectation

A corollary of the first fundamental theorem of asset pricing is that any attainable contingent claim $C_1 \in \mathbb{A}$ can be priced by taking the expectation under the martingale measure of its future payoff and discounting with the riskless interest rate. The arbitrage price of the call option is known through replication. Assuming the same numerical price processes for the traded financial assets and the same numerical future payoff vector for the call option, the /martingale price/ of the call option is:

$C_0 = \frac{1}{1 + i} \cdot E^Q(C_1) = \frac{1}{1 + i} \cdot (q \cdot C_1^u + (1 - q) \cdot C_1^d)$

In python, martingale pricing boils down the the evaluation of a dot product:

#+begin_src python
Q = (q, 1 - q)               # define the martingale as a tuple Q
np.dot(Q, C1) / (1 + i)      # implements the martingale pricing formula
#+end_src

* Second Fundxpamental Theorem of Asset Pricing

This relates the uniqueness of the martingale measure with market completeness.

** Second Fundamental Theorem of Asset Pricing

The following statements are equivalent:
1. The martingale measure is unique
2. The market model is complete

* Mean-Variance Portfolios

A major breakthrough in finance was the formalization and quantification of portfolio investing through the mean-variance portfolio theory (MVP) as pioneered by Markowitz.
MVP reduces a financial asset to the first and second moment of its returns, namely the mean as the expected rate of return and the variance of the rates of return or the volatility.
Although the approach is generally called mean-variance, it is often the combination mean-volatility that is used

The *expected portfolio payoff* for a riskless bond and risky stock s.t. b + s = 1 with $b, s \in \mathcal{R}_{\geq 0}$

$E^P (\mathcal{M} \cdot \phi) = b \cdot B_1 + s \cdot E^P(S1)$

In words: the expected portfolio payoff is simply b times the riskless bond payoff s times the expected stock payoff.

The *expected portfolio rate of return* is

$E^P(\mathcal{R} \cdot \phi) = b \cdot i + s \cdot \mu$

where $\mathcal{R} = \begin{pmatrix} i & r_1^u \\ i & r_1^d \end{pmatrix}$

In words: The expected portfolio rate of return is b times the riskless interest rate + s times the expected rate of return of the stock

The *portfolio variance* is

$\sigma^2 (\mathcal{R} \cdot \phi) = s^2 \cdot \sigma^2(r_1)$

or $s^2$ times the stock variance, which makes sense since the bond is riskless.

Here is portfolio volatility:

$\sigma (\mathcal{R} \cdot \phi) = s \cdot \sigma(r_1)$

#+begin_src python
B = (10, np.array((11, 11)))
S = (10, np.array((20, 5)))
M = np.array((B[1], S[1])).T            # matrix with the future prices of the financial assets
M0 = np.array((B[0], S[0]))             # vector with the prices of the financial assets today
R = M / M0 - 1                          # the return matrix
P = np.array((0.5, 0.5))                # defines the probability measure

np.dot(P, R)                            # the expected returns of the bond and stock
s = 0.55                                # an example allocation for the stock in percent (decimals)
phi = (1 - s, s)                        # resulting portfolio with a weight of 1
mu = np.dot(phi, np.dot(P, R))          # expected portfolio return given the allocations
sigma = s * R[:, 1].std()               # volatility of the portfolio

values = np.linspace(0, 1, 25)
mu = [np.dot(((1 - s), s), np.dot(P, R)) for s in values]
sigma = [s * R[:, 1].std() for s in values]

# expected portfolio return and volatility for different allocations
plt.figure()
plt.plot(values, mu, lw=3.0, label='$\mu_p$')
plt.plot(values, sigma, '--', lw=3.0, label='$\sigma_p$')
plt.legend(loc=0)
plt.xlabel('$s$')
plt.show()


# feasible combinations of expected portfolio return and volatility
plt.figure()
plt.plot(sigma, mu, lw=3.0, label='risk-return')
plt.legend(loc=0)
plt.xlabel('$\sigma_p$')
plt.ylabel('$\mu_p$')
plt.show()
#+end_src
