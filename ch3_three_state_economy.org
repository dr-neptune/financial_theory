#+TITLE: Chapter 3: Three-State Economy

This chapter enriches the two-state economy by just a single additional state while keeping the number of traded financial assets constant at 2.
In this slightly enriched /static three-state economy/, the notions of market incompleteness and indeterminancy of the martingale measure are discussed.
Super-replication and approximate replication approaches are presented to cope with incompleteness and its consequences for the pricing of contingent claims.
This chapter also presents the Capital Asset Pricing Model (CAPM), which builds on the mean-variance portfolio analysis and adds equilibrium arguments to derive prices for financial assets in mean-volatility space even if they are not replicable.

* Uncertainty

Let the state space be given by $\Omega = \{u, m, d\}$. {u, m, d} represent the three different states of the economy possible in one year.

The probability space $(\Omega, \mathcal{P}(\Omega), P)$ represents uncertainty in the model economy.

* Financial Assets

There are 2 financial assets traded in the model economy.

$B = (B_0, B_1)$ with $B_0 = 10$ and $B_1 = (11, 11, 11)^T$

$S = (S_0, (S_1^u, S_1^m, S_1^d)^T)$ with $S_0 = 10$ and $S_1 = \begin{pmatrix} 20 \\ 10 \\ 5 \end{pmatrix}$

Define the market payoff matrix $\mathcal{M} \in \mathbb{R}^{3 \times 2}$ by

$\mathcal{M} \equiv \begin{pmatrix}  B1 & S_1^u \\ B1 & S_1^m \\ B1 & S_1^d \end{pmatrix} = \begin{pmatrix}  11 & 20 \\ 11 & 10 \\ 11 & 5 \end{pmatrix}$

* Attainable Contingent Claims

The /span/ of the traded financial assets is also called the /set of attainable contingent claims/ $\mathbb{A}$.
A contingent claim $C_1: \Omega \to \mathbb{R}_{\geq 0}$ is said to be attainable if its payoff can be expressed as a linear combination of the payoff vectors of the traded assets. In other words, there exists a portfolio $\phi$ such that $V_1{\phi} = \mathcal{M} \cdot \phi = C_1$.

Therefore (if there are no contraints on the portfolio positions)

$\mathbb{A} = \{\mathcal{M} \cdot \phi, \phi \in \mathbb{R}^2\}$

Using python, the set of attainable contingent claims can be visualized in three dimensions.

#+begin_src python
import numpy as np
from numpy.random import default_rng
np.set_printoptions(precision=5, suppress=True)

rng = default_rng(100)

B = (10, np.array((11, 11, 11)))
S = (10, np.array((20, 10, 5)))
n = 1000                                                          # number of portfolios to be simulated
b = rng.random(n)                                                 # random position in the bond
s = rng.random(n)                                                 # random position in the stock
A = np.array([b[i] * B[1] + s[i] * S[1] for i in range(n)])       # calculate the resulting payoff vectors from the random portfolio compositions

from mpl_toolkits.mplot3d import Axes3D

# random portfolio payoff vectors visualized in 3 dimensions.
# This is the set of attainable contingent claims
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(A[:, 0], A[:, 1], A[:, 2], c = 'r', marker = '.')
ax.set_xlabel('upside')
ax.set_ylabel('medium side')
ax.set_zlabel('downside')
plt.show()
#+end_src

* Martingale Pricing

** Martingale Measures

The defining equation for a martingale measure $Q:\mathcal{P}(\Omega) \to \mathbb{R}_{\geq 0}$ is

$S_0 \cdot (1 + i) = E^Q(S_1)$

or

$S_0 \cdot (1 + i) = q^u \cdot S_1^u + q^m \cdot S_1^m + q^d \cdot S_1^d$

with $q^\omega \equiv Q(\omega), \omega \in \Omega$

#+begin_src python
Q = np.array((0.3, 0.3, 0.4))
np.dot(Q, S[1])
#+end_src

According to the second fundamental theorem of asset pricing, the market model is incomplete since there is more than one martingale measure consistent with the market model.

* Risk-Neutral Pricing

What implications does an infinite number of market have when it comes to the arbitrage pricing of contingent claims?

For those contingent claims that are attainable, $\mathbb{A}$, arbitrage pricing holds as in a complete market setting. $C_0 = V_0(\phi)$ if $V_1(\phi) = C_1$.

* Super-Replication

Replication is important not only in a pricing context. It is also an approach to /hedge risk/ resulting from an uncertain contingent claim payoff.

For an arbitrary attainable contingent claim:

If the portfolio $\phi^*$ replicates contingent claim $C_1$, then

$C_1 - V_1(\phi^*) = C_1 - \mathcal{M} \cdot \phi^* = 0$

For a contingent claim that is not attainable, such a perfect hedge is not available. However, one can always compose a portfolio that /super-replicates/ the payoff of such a contingent claim.

A portfolio $\phi$ super-replicates a contingent claim $C_1$ if its payoff in every future state of the economy is greater than or equal to the contingent claim's payoff: $V_1(\phi) \geq C_1$.

The /super-replication problem/ for a contingent claim $C_1$ at /minimal costs/ is

$\min_\phi V_0(\phi)$ s.t. $V_1(\phi) \geq C_1$

or

$min_{b, s} b \cdot B_0 + s \cdot S_0$

[[file:Super-Replication/2022-06-08_18-00-06_screenshot.png]]

#+begin_src python
C1 = np.array((1, 0, 0))     # payoff of the contingent claim (first Arrow-Debreu security)

1 / B[1][0] * B[1] >= C1     # portfolio with the bond only checked for the super replication characteristic
1 / B[1][0] * B[0]           # the costs to set up the portfolio

def V(phi, t):
    return phi[0] * B[t] + phi[1] * S[t]

phi = np.array((0.04, 0.03)) # another guess for the super replicating portfolio
V(phi, 0)                    # the cost to set it up, which is cheaper than with the bond only
V(phi, 1)                    # resulting value/payoff in one year, which super_replicates the first Arrow-Debreu security

from scipy.optimize import minimize

cons = ({'type': 'ineq', 'fun': lambda phi: V(phi, 1) - C1})  # lambda(phi) = V1(\phi) - C1 for lambda(\phi) \geq 0

res = minimize(lambda phi: V(phi, 0),      # function to be minimized
               (0.01, 0.01),               # initial guess for the optimal solution
               method='SLSQP',             # sequential least squares programming
               constraints=cons)

res

V(res['x'], 0)
V(res['x'], 1)
#+end_src

* Approximate Replication

Super-replication assumes a somewhat extreme situation: the payoff of the contingent claim to be super-replicated must be reached or exceeded in any given state under any circumstances.
This might not be an economically sensible or even viable option in many cases.

This is where /approximation/ comes into play. The idea is to replicate the payoff of a contingent claim /as well as possible/ given an objective function. The problem then becomes minimizing the /replication error/ given the traded financial assets.

A possible candidate for the objective function is the mean squared error

$\min_\phi \mathrm{MSE}(\mathcal{M} \cdot \phi - C_1)$

#+begin_src python
M = np.array((B[1], S[1])).T             # the future price matrix of the two traded financial assets

reg = np.linalg.lstsq(M, C1, rcond=-1)
# (array([-0.04545,  0.07143]), array([0.07143]), 2, array([28.93836,  7.11136]))
# optimal portfolio positions, minimal MSE obtained, rank of matrix M, its singular values

V(reg[0], 0)                             # the value of the approximate portfolio
V(reg[0], 1)                             # the payoff of the approximate portfolio
V(reg[0], 1) - C1                        # the vector with the replication errors
np.mean((V(reg[0], 1) - C1) ** 2)        # the MSE from the approximate replication
#+end_src

* Capital Market Line

Assume a mean-variance / volatility context. In what follows, the risky stock is interpreted as the market portfolio.

Agents can compose portfolios that consist of the bond and the market portfolio. The rate of return for the bond is i = 0.1, and the volatility is 0

The expected return for the market portfolio is

$\mu_s = \frac{E^P(S_1)}{S_0} - 1$

Its volatility is

$\sigma_s = \sqrt{E^P ((\frac{S_1 - S_0}{S_0} - \mu_S)^2)}$


Allowing for short selling, the figure below shows the /capital market line/ resulting from different portfolio compositions.

#+begin_src python
mu_S = 7/6 - 1
sigma_S = (S[1] / S[0]).std()

s = np.linspace(-2, 2, 25)             # market portfolio position in +- 200%
b = (1 - s)                            # bond portfolio position fills up to 100% total portfolio weight
i = 0.1                                # the riskless interest rate
mu = b * i + s * mu_S                  # resulting expected rates of return for the portfolio
sigma = np.abs(s * sigma_S)            # resulting volatility values for the portfolio

# Capital Market Line
plt.figure()
plt.plot(sigma, mu)
plt.xlabel('$\sigma$')
plt.ylabel('$\mu$')
plt.show()
#+end_src

The equation describing the (upper, increasing part of the) CML is

$\mu = i + \frac{\mu_S - i}{\sigma_S} \cdot \sigma$

* Capital Asset Pricing Model

The /Capital Asset Pricing Model/ (CAPM) as pioneered by Sharpe is an equilibrium pricing model that mainly relates the expected rate of return of an arbitrary financial asset or portfolio and its volatility with the market portfolio's expected rate of return and volatility.

To this end, the /correlation/ between the rates of return of a financial asset and the market portfolio is of importance.

Consider the case of a financial asset $T$, which is part of the market portfolio and for which the correlation with the market portfolio shall not be perfect. For such a financial asset, the expected rate of return is given by:

$\mu_T = i + \frac{\rho_{ST} \cdot \sigma_S \cdot \sigma_T}{\sigma_S^2} \cdot (\mu_S - i)$

where $\rho_{ST}$ is the correlation between asset T and asset S

If we let $\beta_T \equiv \frac{\rho_{ST} \cdot \sigma_S \cdot \sigma_T}{\sigma_S^2}$, then we get the famous CAPM linear relationship between the expected rate of return of the market portfolio and the expected return of the financial asset $T$:

$\mu_T = i + \beta_T \cdot (\mu_S - i)$

This could also be applied to any financial asset. In that sense, the CAPM states that the rate of return for any financial asset is only determined by the expected excess return of the market portfolio over the risk-less interest rate and the beta factor, which is the covariance between the two, scaled by the square of the market portfolio volatility (variance of returns).

For the CAPM, the CML is replaced by the /security market line/, which is plotted in beta-return space as follows:

#+begin_src python
beta = np.linspace(0, 2, 25)
mu = i + beta * (mu_S - i)

# security market line
plt.figure()
plt.plot(beta, mu, label='security market line')
plt.xlabel('$\\beta$')
plt.ylabel('$\\mu$')
plt.ylim(0, 0.25)
plt.plot(1, mu_S, 'ro', label='market portfolio')
plt.legend(loc=0)
plt.show()
#+end_src
